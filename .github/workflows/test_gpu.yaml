# This is a test workflow the other (self-hosted runner based) workflows rely on
name: Test workflow (self-hosted, GPU)

# Controls when the action will run. This is a reusable workflow.
on:
  workflow_call:
    # Inputs the workflow accepts.
    inputs:
      xobjects_location:
        required: true
        type: string
      xdeps_location:
        required: true
        type: string
      xpart_location:
        required: true
        type: string
      xtrack_location:
        required: true
        type: string
      xfields_location:
        required: true
        type: string
      xmask_location:
        required: true
        type: string
      xcoll_location:
        required: true
        type: string
      test_contexts:
        required: false
        type: string
        default: 'ContextCpu;ContextCpu:auto;ContextCupy;ContextPyopencl'
      platform:
        required: true
        type: string

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
# The jobs are all run in independent environments. Here we will run a separate job
# for each of the test suites specified in the matrix below.
jobs:
  # First, we build our test image
  build-test-image:
    runs-on: [self-hosted, "${{ inputs.platform }}"]
    outputs:
      image_id: ${{ steps.build-image.outputs.image_id }}
    steps:
      - id: checkout-repo
        name: Checkout the repo
        uses: actions/checkout@v3
      - id: build-image
        name: Build the test image
        env:
          xobjects_branch: ${{ inputs.xobjects_location }}
          xdeps_branch: ${{ inputs.xdeps_location }}
          xpart_branch: ${{ inputs.xpart_location }}
          xtrack_branch: ${{ inputs.xtrack_location }}
          xfields_branch: ${{ inputs.xfields_location }}
          xmask_branch: ${{ inputs.xmask_location }}
          xcoll_branch: ${{ inputs.xcoll_location }}
        run: |
          IMAGE="xsuite-test-runner-$(cat /proc/sys/kernel/random/uuid)"
          echo "image_id=$IMAGE" >> $GITHUB_OUTPUT
          docker build \
            --network=host \
            --no-cache=true \
            --build-arg xobjects_branch=${xobjects_branch} \
            --build-arg xdeps_branch=${xdeps_branch} \
            --build-arg xpart_branch=${xpart_branch} \
            --build-arg xtrack_branch=${xtrack_branch} \
            --build-arg xfields_branch=${xfields_branch} \
            --build-arg xmask_branch=${xmask_branch} \
            --build-arg xcoll_branch=${xcoll_branch} \
            -t $IMAGE .

  # Print out some stuff about the test environment
  image-sanity-checks:
    runs-on: [self-hosted, "${{ inputs.platform }}"]
    needs: build-test-image
    env:
      image_id: ${{ needs.build-test-image.outputs.image_id }}
    steps:
      - name: CUDA info
        run: docker run --rm --gpus all ${image_id} nvidia-smi
      - name: OpenCL info
        run: docker run --rm --gpus all ${image_id} clinfo
      - name: Package paths
        run: docker run --rm --gpus all ${image_id} python3 /opt/xsuite/xtrack/examples/print_package_paths.py
      - name: List dependencies
        run: docker run --rm --gpus all ${image_id} pip freeze

  # Run the tests for each repo in parallel in a test container
  run-tests:
    runs-on: [self-hosted, "${{ inputs.platform }}"]
    needs: [build-test-image, image-sanity-checks]
    strategy:
      fail-fast: false
      matrix:
        test-suite:
        - xobjects
        - xdeps
        - xpart
        - xtrack
        - xfields
        - xmask
        - xcoll

    steps:
    - name: Run pytest
      env:
        image_id: ${{ needs.build-test-image.outputs.image_id }}
        test_contexts: ${{ inputs.test_contexts }}
      run: |
        docker run --rm --gpus all \
          --env XOBJECTS_TEST_CONTEXTS="${test_contexts}" \
          ${image_id} \
          pytest --color=yes -v /opt/xsuite/${{ matrix.test-suite }}/tests

  # Cleanup after the tests by removing the image and making sure there are
  # no unused images and stopped containers
  teardown:
    runs-on: [self-hosted, "${{ inputs.platform }}"]
    needs: [build-test-image, run-tests]
    env:
      image_id: ${{ needs.build-test-image.outputs.image_id }}
    if: always()
    steps:
      - name: Stop the containers and remove the image
        run: |
          docker container stop \
            $(docker ps -q --filter ancestor=${image_id}) || true
          docker container rm --volumes \
            $(docker ps -qa --filter ancestor=${image_id}) || true
          docker image rm ${image_id}
